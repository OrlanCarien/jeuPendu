{"ast":null,"code":"var _jsxFileName = \"/mnt/c/xampp2/htdocs/memory/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nconst HIDDEN_SYMBOL = \"_\";\n\nconst Lettre = ({\n  lettre,\n  feedback\n}) => /*#__PURE__*/React.createElement(\"div\", {\n  className: `lettre ${feedback}`,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(\"span\", {\n  className: \"lettre\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }\n}, feedback === 'hidden' ? HIDDEN_SYMBOL : lettre));\n\nconst Reinit = ({\n  onClick\n}) => /*#__PURE__*/React.createElement(\"div\", {\n  className: \"reinitParent\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(\"div\", {\n  className: `win`,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }\n}, \"Vous avez gagn\\xE9!\"), /*#__PURE__*/React.createElement(\"button\", {\n  className: `reinit`,\n  onClick: () => onClick(),\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }\n}, \"Recommencer\"));\n\nconst Entree = ({\n  lettre,\n  feedback,\n  range,\n  onClick\n}) => /*#__PURE__*/React.createElement(\"div\", {\n  className: `entree ${feedback} ${range}`,\n  onClick: () => onClick(lettre),\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(\"span\", {\n  className: \"symbol\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }\n}, lettre));\n\nfunction getAllIndexes(arr, val) {\n  let indexes = [],\n      i;\n\n  for (i = 0; i < arr.length; i++) if (arr[i] === val) indexes.push(i);\n\n  return indexes;\n}\n\nlet count = 0;\nlet copy = [];\nconst LISTE_MOT = [\"SERPENT\", \"TORTUE\", \"CHEVAL\", \"CROCODILE\", \"LION\", \"ELEPHANT\", \"CHEVRE\", \"MOUTON\", \"CRAPAUD\"];\nlet min = 0;\nlet max = LISTE_MOT.length;\nlet random = parseInt(min + Math.random() * (max - min), 10);\nlet MOT = LISTE_MOT[random];\nconst ALPHABET = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"; //On transforme le string mot en array\n\nconst getMot = mot => {\n  return mot.split('');\n}; //On transforme le string mot en lettre ({id:..., name:..., feedback:...})\n\n\nconst getLettre = mot => {\n  let lettre = getMot(mot);\n  lettre = lettre.map(function (value, index) {\n    value = {\n      id: index + 1,\n      name: value,\n      feedback: \"hidden\"\n    };\n    return value;\n  });\n  return lettre;\n}; //On transforme le string mot en entree ({id:..., name:..., feedback:...})\n\n\nconst getEntree = alphabet => {\n  let entree = getMot(alphabet);\n  entree = entree.map(function (value, index) {\n    value = {\n      id: index + 1,\n      name: value,\n      feedback: \"clickable\"\n    };\n    return value;\n  });\n  return entree;\n};\n\nconst getInitialiser = (obj, detail) => {\n  if (detail === \"constructor\") obj.state = {\n    won: false,\n    matchedIndices: [],\n    mot: getMot(MOT),\n    lettre: getLettre(MOT),\n    entree: getEntree(ALPHABET)\n  };else obj.setState({\n    won: false,\n    matchedIndices: [],\n    mot: getMot(MOT),\n    lettre: getLettre(MOT),\n    entree: getEntree(ALPHABET)\n  });\n};\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleReinit = () => {\n      let oldRandom = random;\n\n      do {\n        random = parseInt(min + Math.random() * (max - min), 10);\n      } while (oldRandom === random);\n\n      MOT = LISTE_MOT[random];\n      getInitialiser(this, \"function\");\n    };\n\n    this.handleKeyDown = event => {\n      if (event.keyCode > 64 && event.keyCode < 91) {\n        let valeurLettre = this.state.entree[event.keyCode - 65].name;\n        this.handleClick(valeurLettre);\n      }\n    };\n\n    this.handleClick = boutonClique => {\n      let entree = [...this.state.entree];\n      let compteur = 0;\n      entree.map(function (index) {\n        if (index.name === boutonClique) {\n          entree[compteur] = { ...entree[compteur],\n            feedback: \"unclickable\"\n          };\n        }\n\n        compteur++;\n        return 1;\n      });\n      this.setState({\n        entree\n      });\n\n      if (this.state.mot.indexOf(boutonClique) !== -1 && this.state.won === false) {\n        let indexes = getAllIndexes(this.state.mot, boutonClique);\n        let lettre = [...this.state.lettre];\n        let matchedIndices = [...this.state.matchedIndices];\n        indexes.map(function (index) {\n          matchedIndices[index] = { ...matchedIndices[index],\n            ...lettre[index].name\n          };\n          lettre[index] = { ...lettre[index],\n            feedback: \"visible\"\n          };\n          return 1;\n        });\n        this.setState({\n          lettre\n        });\n        this.setState({\n          matchedIndices\n        });\n        copy = this.state.mot;\n        count = 0;\n        matchedIndices.map(function (value, key) {\n          if (value !== undefined && copy[key] === value[0]) {\n            count = count + 1;\n          }\n\n          return 1;\n        });\n\n        if (count === this.state.mot.length) {\n          this.setState({\n            won: true\n          });\n          /*\n          let oldRandom = random\n          do\n          {\n          random = parseInt(min + Math.random() * (max - min), 10)\n          }while(oldRandom === random)\n          MOT = LISTE_MOT[random]\n          getInitialiser(this, \"function\")\n          \n          */\n        }\n      }\n    };\n\n    getInitialiser(this, \"constructor\");\n  }\n\n  componentDidMount() {\n    document.addEventListener(\"keydown\", this.handleKeyDown);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.handleKeyDown);\n  }\n\n  render() {\n    const {\n      lettre,\n      entree,\n      won\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 7\n      }\n    }, lettre.map((lettre, index) => /*#__PURE__*/React.createElement(Lettre, {\n      lettre: lettre.name,\n      feedback: lettre.feedback,\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 13\n      }\n    })), !won && entree.map((entree, index) => /*#__PURE__*/React.createElement(Entree, {\n      lettre: entree.name,\n      feedback: entree.feedback,\n      range: index < 13 ? 'firstRange' : 'secondRange',\n      onClick: this.handleClick,\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 13\n      }\n    })), won && /*#__PURE__*/React.createElement(Reinit, {\n      onClick: this.handleReinit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 15\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/mnt/c/xampp2/htdocs/memory/src/App.js"],"names":["React","Component","HIDDEN_SYMBOL","Lettre","lettre","feedback","Reinit","onClick","Entree","range","getAllIndexes","arr","val","indexes","i","length","push","count","copy","LISTE_MOT","min","max","random","parseInt","Math","MOT","ALPHABET","getMot","mot","split","getLettre","map","value","index","id","name","getEntree","alphabet","entree","getInitialiser","obj","detail","state","won","matchedIndices","setState","App","constructor","props","handleReinit","oldRandom","handleKeyDown","event","keyCode","valeurLettre","handleClick","boutonClique","compteur","indexOf","key","undefined","componentDidMount","document","addEventListener","componentWillUnmount","removeEventListener","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\nconst HIDDEN_SYMBOL = \"_\";\nconst Lettre = ({ lettre, feedback }) => (\n  <div className={`lettre ${feedback}`}>\n    <span className=\"lettre\">\n      {feedback === 'hidden' ? HIDDEN_SYMBOL : lettre}\n    </span>\n  </div>\n)\nconst Reinit = ({ onClick }) => (\n  <div className=\"reinitParent\">\n    <div className={`win`}>Vous avez gagné!</div>\n    <button className={`reinit`} onClick={() => onClick()}>\n      Recommencer\n    </button>\n  </div>\n)\nconst Entree = ({ lettre, feedback, range, onClick }) => (\n  <div className={`entree ${feedback} ${range}`} onClick={() => onClick(lettre)}>\n    <span className=\"symbol\">\n      {lettre}\n    </span>\n  </div>\n)\nfunction getAllIndexes (arr, val){\n      let indexes = [], i;\n      for(i = 0; i < arr.length; i++)\n          if (arr[i] === val)\n              indexes.push(i);\n      return indexes;\n  }\nlet count = 0 \nlet copy = []\nconst LISTE_MOT = [\"SERPENT\", \"TORTUE\", \"CHEVAL\", \"CROCODILE\", \"LION\", \"ELEPHANT\", \"CHEVRE\", \"MOUTON\", \"CRAPAUD\"]\nlet min = 0\nlet max = LISTE_MOT.length\nlet random = parseInt(min + Math.random() * (max - min), 10)\nlet MOT = LISTE_MOT[random]\nconst ALPHABET = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n//On transforme le string mot en array\nconst getMot = (mot) =>{\n  return mot.split('')\n}\n//On transforme le string mot en lettre ({id:..., name:..., feedback:...})\nconst getLettre = (mot) =>{\n  let lettre = getMot(mot)\n  lettre = lettre.map(function(value, index){\n    value = {id: index+1, name: value, feedback: \"hidden\"}\n    return value\n  })\n  return lettre\n}\n//On transforme le string mot en entree ({id:..., name:..., feedback:...})\nconst getEntree = (alphabet) =>{\n  let entree = getMot(alphabet)\n  entree = entree.map(function(value, index){\n    value = {id: index+1, name: value, feedback: \"clickable\"}\n    return value\n  })\n  return entree\n}\nconst getInitialiser  = (obj, detail) =>  {\n  \n  if(detail ===  \"constructor\")\n    obj.state = {\n      won : false,\n      matchedIndices : [],\n      mot :getMot(MOT),\n      lettre :getLettre(MOT),\n      entree : getEntree(ALPHABET)\n      }\n  else\n  \n    obj.setState({\n      won : false,\n      matchedIndices : [],\n      mot :getMot(MOT),\n      lettre :getLettre(MOT),\n      entree : getEntree(ALPHABET)\n      })\n} \nclass App extends Component {\n  constructor(props) {\n    super(props);\n    getInitialiser(this, \"constructor\")\n  }\n  handleReinit = () => {\n    let oldRandom = random\n    do\n    {\n      random = parseInt(min + Math.random() * (max - min), 10)\n    }while(oldRandom === random)\n    MOT = LISTE_MOT[random]\n    getInitialiser(this, \"function\")\n  }\n  handleKeyDown = (event) => {\n\n        if(event.keyCode > 64 && event.keyCode < 91)\n        {\n          let valeurLettre = this.state.entree[event.keyCode-65].name\n          this.handleClick(valeurLettre)\n        }\n      \n  }\n  \n  componentDidMount(){\n      document.addEventListener(\"keydown\", this.handleKeyDown)\n  }\n\n\n  componentWillUnmount() {\n      document.removeEventListener(\"keydown\", this.handleKeyDown)\n  }\n  \n  handleClick = (boutonClique) => {\n    let entree = [ ...this.state.entree ]\n    let compteur = 0\n    entree.map(function(index) {\n      if(index.name ===  boutonClique){\n        entree[compteur] = {...entree[compteur], feedback: \"unclickable\"}\n      }\n      compteur++\n      return 1\n    })\n    this.setState({ entree })\n    if(this.state.mot.indexOf(boutonClique) !== -1 && this.state.won === false){\n      let indexes = getAllIndexes(this.state.mot, boutonClique);\n      let lettre = [ ...this.state.lettre ]\n      let matchedIndices = [ ...this.state.matchedIndices ]\n      \n      indexes.map(function(index) {\n        matchedIndices[index] = {...matchedIndices[index], ...lettre[index].name}\n        lettre[index] = {...lettre[index], feedback: \"visible\"}\n        \n        return 1\n      })\n      \n      \n      this.setState({ lettre })\n      this.setState({ matchedIndices })\n      \n      copy = this.state.mot\n      count = 0\n      matchedIndices.map(function(value, key){\n        if(value !== undefined && copy[key] === value[0])\n        {\n          count = count + 1\n        }\n        return 1\n      })\n      if(count === this.state.mot.length){\n        this.setState({ won: true })\n        /*\n        let oldRandom = random\n        do\n        {\n        random = parseInt(min + Math.random() * (max - min), 10)\n        }while(oldRandom === random)\n        MOT = LISTE_MOT[random]\n        getInitialiser(this, \"function\")\n        \n        */\n      }\n      \n      \n    }\n    \n  }\n\n render () {\n    const { lettre, entree, won} = this.state\n    return (\n      <div className=\"App\">\n      {lettre.map((lettre, index) => (\n            <Lettre lettre={lettre.name} feedback={lettre.feedback} key={index} />\n       ))}\n      {!won && entree.map((entree, index) => (\n           \n            <Entree lettre={entree.name} feedback={entree.feedback} range={index < 13 ? 'firstRange' : 'secondRange'} onClick={this.handleClick} key={index}   />\n\n      ))}\n      {won && <Reinit onClick={this.handleReinit}/>}\n       \n      </div>\n    )\n  }\n\n}\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}