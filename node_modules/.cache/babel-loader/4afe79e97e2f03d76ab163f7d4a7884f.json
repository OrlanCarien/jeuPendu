{"ast":null,"code":"var _jsxFileName = \"/mnt/c/xampp2/htdocs/memory/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nconst HIDDEN_SYMBOL = \"_\";\n\nconst Lettre = ({\n  lettre,\n  feedback\n}) => /*#__PURE__*/React.createElement(\"div\", {\n  className: `lettre ${feedback}`,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(\"span\", {\n  className: \"lettre\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }\n}, feedback === 'hidden' ? HIDDEN_SYMBOL : lettre));\n\nconst Entree = ({\n  lettre,\n  feedback,\n  range,\n  onClick\n}) => /*#__PURE__*/React.createElement(\"div\", {\n  className: `entree ${feedback} ${range}`,\n  onClick: () => onClick(lettre),\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(\"span\", {\n  className: \"symbol\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }\n}, lettre));\n\nfunction getAllIndexes(arr, val) {\n  let indexes = [],\n      i;\n\n  for (i = 0; i < arr.length; i++) if (arr[i] === val) indexes.push(i);\n\n  return indexes;\n}\n\nlet count = 0;\nlet copy = [];\nconst MOT = \"SERPENT\";\nconst ALPHABET = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"; //On transforme le string mot en array\n\nconst getMot = mot => {\n  return mot.split('');\n}; //On transforme le string mot en lettre ({id:..., name:..., feedback:...})\n\n\nconst getLettre = mot => {\n  let lettre = getMot(mot);\n  lettre = lettre.map(function (value, index) {\n    value = {\n      id: index + 1,\n      name: value,\n      feedback: \"hidden\"\n    };\n    return value;\n  });\n  return lettre;\n}; //On transforme le string mot en entree ({id:..., name:..., feedback:...})\n\n\nconst getEntree = alphabet => {\n  let entree = getMot(alphabet);\n  entree = entree.map(function (value, index) {\n    value = {\n      id: index + 1,\n      name: value,\n      feedback: \"clickable\"\n    };\n    return value;\n  });\n  return entree;\n};\n\nconst getInitialiser = (obj, detail) => {\n  if (detail === \"constructor\") obj.state = {\n    won: false,\n    matchedIndices: [],\n    mot: getMot(MOT),\n    lettre: getLettre(MOT),\n    entree: getEntree(ALPHABET)\n  };else obj.setState({\n    won: false,\n    matchedIndices: [],\n    mot: [\"S\", \"E\", \"R\", \"P\", \"E\", \"N\", \"T\"],\n    lettre: [{\n      id: 1,\n      name: \"S\",\n      feedback: \"hidden\"\n    }, {\n      id: 2,\n      name: \"E\",\n      feedback: \"hidden\"\n    }, {\n      id: 3,\n      name: \"R\",\n      feedback: \"hidden\"\n    }, {\n      id: 4,\n      name: \"P\",\n      feedback: \"hidden\"\n    }, {\n      id: 5,\n      name: \"E\",\n      feedback: \"hidden\"\n    }, {\n      id: 6,\n      name: \"N\",\n      feedback: \"hidden\"\n    }, {\n      id: 7,\n      name: \"T\",\n      feedback: \"hidden\"\n    }],\n    entree: [{\n      id: 1,\n      name: \"A\",\n      feedback: \"clickable\"\n    }, {\n      id: 2,\n      name: \"B\",\n      feedback: \"clickable\"\n    }, {\n      id: 3,\n      name: \"C\",\n      feedback: \"clickable\"\n    }, {\n      id: 4,\n      name: \"D\",\n      feedback: \"clickable\"\n    }, {\n      id: 5,\n      name: \"E\",\n      feedback: \"clickable\"\n    }, {\n      id: 6,\n      name: \"F\",\n      feedback: \"clickable\"\n    }, {\n      id: 7,\n      name: \"G\",\n      feedback: \"clickable\"\n    }, {\n      id: 8,\n      name: \"H\",\n      feedback: \"clickable\"\n    }, {\n      id: 9,\n      name: \"I\",\n      feedback: \"clickable\"\n    }, {\n      id: 10,\n      name: \"J\",\n      feedback: \"clickable\"\n    }, {\n      id: 11,\n      name: \"K\",\n      feedback: \"clickable\"\n    }, {\n      id: 12,\n      name: \"L\",\n      feedback: \"clickable\"\n    }, {\n      id: 13,\n      name: \"M\",\n      feedback: \"clickable\"\n    }, {\n      id: 14,\n      name: \"N\",\n      feedback: \"clickable\"\n    }, {\n      id: 15,\n      name: \"O\",\n      feedback: \"clickable\"\n    }, {\n      id: 16,\n      name: \"P\",\n      feedback: \"clickable\"\n    }, {\n      id: 17,\n      name: \"Q\",\n      feedback: \"clickable\"\n    }, {\n      id: 18,\n      name: \"R\",\n      feedback: \"clickable\"\n    }, {\n      id: 19,\n      name: \"S\",\n      feedback: \"clickable\"\n    }, {\n      id: 20,\n      name: \"T\",\n      feedback: \"clickable\"\n    }, {\n      id: 21,\n      name: \"U\",\n      feedback: \"clickable\"\n    }, {\n      id: 22,\n      name: \"V\",\n      feedback: \"clickable\"\n    }, {\n      id: 23,\n      name: \"W\",\n      feedback: \"clickable\"\n    }, {\n      id: 24,\n      name: \"X\",\n      feedback: \"clickable\"\n    }, {\n      id: 25,\n      name: \"Y\",\n      feedback: \"clickable\"\n    }, {\n      id: 26,\n      name: \"Z\",\n      feedback: \"clickable\"\n    }]\n  });\n};\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this._handleKeyDown = event => {\n      if (event.keyCode > 64 && event.keyCode < 91) {\n        let valeurLettre = this.state.entree[event.keyCode - 65].name;\n        this.handleClick(valeurLettre);\n      }\n    };\n\n    this.handleClick = boutonClique => {\n      let entree = [...this.state.entree];\n      let compteur = 0;\n      entree.map(function (index) {\n        if (index.name === boutonClique) {\n          entree[compteur] = { ...entree[compteur],\n            feedback: \"unclickable\"\n          };\n        }\n\n        compteur++;\n        return 1;\n      });\n      this.setState({\n        entree\n      });\n\n      if (this.state.mot.indexOf(boutonClique) !== -1 && this.state.won === false) {\n        let indexes = getAllIndexes(this.state.mot, boutonClique);\n        let lettre = [...this.state.lettre];\n        let matchedIndices = [...this.state.matchedIndices];\n        indexes.map(function (index) {\n          matchedIndices[index] = { ...matchedIndices[index],\n            ...lettre[index].name\n          };\n          lettre[index] = { ...lettre[index],\n            feedback: \"visible\"\n          };\n          return 1;\n        });\n        this.setState({\n          lettre\n        });\n        this.setState({\n          matchedIndices\n        });\n        copy = this.state.mot;\n        count = 0;\n        matchedIndices.map(function (value, key) {\n          if (value !== undefined && copy[key] === value[0]) {\n            count = count + 1;\n          }\n\n          return 1;\n        });\n\n        if (count === this.state.mot.length) {\n          this.setState({\n            won: true\n          });\n          getInitialiser(this, \"function\");\n          alert(\"Vous avez gagnÃ©\");\n        }\n      }\n    };\n\n    getInitialiser(this, \"constructor\");\n  }\n\n  componentDidMount() {\n    document.addEventListener(\"keydown\", this._handleKeyDown);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this._handleKeyDown);\n  }\n\n  render() {\n    const {\n      lettre,\n      entree\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 7\n      }\n    }, lettre.map((lettre, index) => /*#__PURE__*/React.createElement(Lettre, {\n      lettre: lettre.name,\n      feedback: lettre.feedback,\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 13\n      }\n    })), entree.map((entree, index) => /*#__PURE__*/React.createElement(Entree, {\n      lettre: entree.name,\n      feedback: entree.feedback,\n      range: index < 13 ? 'firstRange' : 'secondRange',\n      onClick: this.handleClick,\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 13\n      }\n    })));\n  }\n\n}\n/*\nfunction App() {\n  return (\n    <div className=\"App\">\n    {this.lettre.map((lettre, index) => (\n      <Lettre lettre={lettre.name} feedback=\"hidden\" index={index} />\n    \n    ))}\n    </div>\n  );\n}\n*/\n\n\nexport default App;","map":{"version":3,"sources":["/mnt/c/xampp2/htdocs/memory/src/App.js"],"names":["React","Component","HIDDEN_SYMBOL","Lettre","lettre","feedback","Entree","range","onClick","getAllIndexes","arr","val","indexes","i","length","push","count","copy","MOT","ALPHABET","getMot","mot","split","getLettre","map","value","index","id","name","getEntree","alphabet","entree","getInitialiser","obj","detail","state","won","matchedIndices","setState","App","constructor","props","_handleKeyDown","event","keyCode","valeurLettre","handleClick","boutonClique","compteur","indexOf","key","undefined","alert","componentDidMount","document","addEventListener","componentWillUnmount","removeEventListener","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\nconst HIDDEN_SYMBOL = \"_\";\nconst Lettre = ({ lettre, feedback }) => (\n  <div className={`lettre ${feedback}`}>\n    <span className=\"lettre\">\n      {feedback === 'hidden' ? HIDDEN_SYMBOL : lettre}\n    </span>\n  </div>\n)\nconst Entree = ({ lettre, feedback, range, onClick }) => (\n  <div className={`entree ${feedback} ${range}`} onClick={() => onClick(lettre)}>\n    <span className=\"symbol\">\n      {lettre}\n    </span>\n  </div>\n)\nfunction getAllIndexes (arr, val){\n      let indexes = [], i;\n      for(i = 0; i < arr.length; i++)\n          if (arr[i] === val)\n              indexes.push(i);\n      return indexes;\n  }\nlet count = 0 \nlet copy = []\nconst MOT = \"SERPENT\"\nconst ALPHABET = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n//On transforme le string mot en array\nconst getMot = (mot) =>{\n  return mot.split('')\n}\n//On transforme le string mot en lettre ({id:..., name:..., feedback:...})\nconst getLettre = (mot) =>{\n  let lettre = getMot(mot)\n  lettre = lettre.map(function(value, index){\n    value = {id: index+1, name: value, feedback: \"hidden\"}\n    return value\n  })\n  return lettre\n}\n//On transforme le string mot en entree ({id:..., name:..., feedback:...})\nconst getEntree = (alphabet) =>{\n  let entree = getMot(alphabet)\n  entree = entree.map(function(value, index){\n    value = {id: index+1, name: value, feedback: \"clickable\"}\n    return value\n  })\n  return entree\n}\nconst getInitialiser  = (obj, detail) =>  {\n  if(detail ===  \"constructor\")\n    obj.state = {\n      won : false,\n      matchedIndices : [],\n      mot :getMot(MOT),\n      lettre :getLettre(MOT),\n      entree : getEntree(ALPHABET)\n      }\n  else\n    obj.setState({\n      won : false,\n      matchedIndices : [],\n      mot :[\"S\", \"E\", \"R\", \"P\", \"E\", \"N\", \"T\"],\n      lettre :[\n        {id:1, name:\"S\", feedback: \"hidden\"},\n        {id:2, name:\"E\", feedback: \"hidden\"},\n        {id:3, name:\"R\", feedback: \"hidden\"},\n        {id:4, name:\"P\", feedback: \"hidden\"},\n        {id:5, name:\"E\", feedback: \"hidden\"},\n        {id:6, name:\"N\", feedback: \"hidden\"},\n        {id:7, name:\"T\", feedback: \"hidden\"}\n      ],\n      entree : [\n        {id:1, name:\"A\" , feedback: \"clickable\"},\n        {id:2, name:\"B\", feedback: \"clickable\"},\n        {id:3, name:\"C\", feedback: \"clickable\"},\n        {id:4, name:\"D\", feedback: \"clickable\"},\n        {id:5, name:\"E\", feedback: \"clickable\"},\n        {id:6, name:\"F\", feedback: \"clickable\"},\n        {id:7, name:\"G\", feedback: \"clickable\"},\n        {id:8, name:\"H\", feedback: \"clickable\"},\n        {id:9, name:\"I\", feedback: \"clickable\"},\n        {id:10, name:\"J\", feedback: \"clickable\"},\n        {id:11, name:\"K\", feedback: \"clickable\"},\n        {id:12, name:\"L\", feedback: \"clickable\"},\n        {id:13, name:\"M\", feedback: \"clickable\"},\n        {id:14, name:\"N\", feedback: \"clickable\"},\n        {id:15, name:\"O\", feedback: \"clickable\"},\n        {id:16, name:\"P\", feedback: \"clickable\"},\n        {id:17, name:\"Q\", feedback: \"clickable\"},\n        {id:18, name:\"R\", feedback: \"clickable\"},\n        {id:19, name:\"S\", feedback: \"clickable\"},\n        {id:20, name:\"T\", feedback: \"clickable\"},\n        {id:21, name:\"U\", feedback: \"clickable\"},\n        {id:22, name:\"V\", feedback: \"clickable\"},\n        {id:23, name:\"W\", feedback: \"clickable\"},\n        {id:24, name:\"X\", feedback: \"clickable\"},\n        {id:25, name:\"Y\", feedback: \"clickable\"},\n        {id:26, name:\"Z\", feedback: \"clickable\"},\n      ]\n      })\n} \nclass App extends Component {\n  constructor(props) {\n    super(props);\n    getInitialiser(this, \"constructor\")\n  }\n  \n  _handleKeyDown = (event) => {\n\n        if(event.keyCode > 64 && event.keyCode < 91)\n        {\n          let valeurLettre = this.state.entree[event.keyCode-65].name\n          this.handleClick(valeurLettre)\n        }\n      \n  }\n  \n  componentDidMount(){\n      document.addEventListener(\"keydown\", this._handleKeyDown)\n  }\n\n\n  componentWillUnmount() {\n      document.removeEventListener(\"keydown\", this._handleKeyDown)\n  }\n  \n  handleClick = (boutonClique) => {\n    let entree = [ ...this.state.entree ]\n    let compteur = 0\n    entree.map(function(index) {\n      if(index.name ===  boutonClique){\n        entree[compteur] = {...entree[compteur], feedback: \"unclickable\"}\n      }\n      compteur++\n      return 1\n    })\n    this.setState({ entree })\n    if(this.state.mot.indexOf(boutonClique) !== -1 && this.state.won === false){\n      let indexes = getAllIndexes(this.state.mot, boutonClique);\n      let lettre = [ ...this.state.lettre ]\n      let matchedIndices = [ ...this.state.matchedIndices ]\n      \n      indexes.map(function(index) {\n        matchedIndices[index] = {...matchedIndices[index], ...lettre[index].name}\n        lettre[index] = {...lettre[index], feedback: \"visible\"}\n        \n        return 1\n      })\n      \n      \n      this.setState({ lettre })\n      this.setState({ matchedIndices })\n      \n      copy = this.state.mot\n      count = 0\n      matchedIndices.map(function(value, key){\n        if(value !== undefined && copy[key] === value[0])\n        {\n          count = count + 1\n        }\n        return 1\n      })\n      if(count === this.state.mot.length){\n        this.setState({ won: true })\n        getInitialiser(this, \"function\")\n        alert(\"Vous avez gagnÃ©\")\n      }\n      \n      \n    }\n    \n  }\n\n render () {\n    const { lettre, entree} = this.state\n    return (\n      <div className=\"App\">\n      {lettre.map((lettre, index) => (\n            <Lettre lettre={lettre.name} feedback={lettre.feedback} key={index} />\n       ))}\n      {entree.map((entree, index) => (\n           \n            <Entree lettre={entree.name} feedback={entree.feedback} range={index < 13 ? 'firstRange' : 'secondRange'} onClick={this.handleClick} key={index}   />\n\n      ))}\n       \n      </div>\n    )\n  }\n\n}\n\n/*\nfunction App() {\n  return (\n    <div className=\"App\">\n    {this.lettre.map((lettre, index) => (\n      <Lettre lettre={lettre.name} feedback=\"hidden\" index={index} />\n    \n    ))}\n    </div>\n  );\n}\n*/\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}